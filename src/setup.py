import os
import subprocess
from database.db import conectar
import cx_Oracle

# Etapa 1: Instalar dependências
def instalar_dependencias():
    print("Instalando dependências do projeto...")
    subprocess.run(["pip", "install", "-r", "requirements.txt"])

# Etapa 2: Criar tabelas e dados no banco Oracle
def preparar_banco():
    try:
        conn = conectar()
        cursor = conn.cursor()

        print("Criando tabelas no Oracle...")

        cursor.execute("""
        BEGIN
            EXECUTE IMMEDIATE 'CREATE TABLE tipos_residuo (
                id_residuo NUMBER PRIMARY KEY,
                nome_residuo VARCHAR2(100)
            )';
        EXCEPTION
            WHEN OTHERS THEN
                IF SQLCODE != -955 THEN -- tabela já existe
                    RAISE;
                END IF;
        END;
        """)

        cursor.execute("""
        BEGIN
            EXECUTE IMMEDIATE 'CREATE TABLE empresas_parceiras (
                id_empresa NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                nome VARCHAR2(200),
                id_residuo NUMBER,
                localizacao VARCHAR2(100),
                contato VARCHAR2(100),
                CONSTRAINT fk_residuo FOREIGN KEY (id_residuo) REFERENCES tipos_residuo(id_residuo)
            )';
        EXCEPTION
            WHEN OTHERS THEN
                IF SQLCODE != -955 THEN
                    RAISE;
                END IF;
        END;
        """)

        print("Inserindo dados iniciais...")

        # Inserir dados em tipos_residuo
        tipos_residuo = [
            (0, 'Papelão'),
            (1, 'Plástico'),
            (2, 'Papelão/Plástico')
        ]
        for id_residuo, nome in tipos_residuo:
            cursor.execute("""
                MERGE INTO tipos_residuo t
                USING (SELECT :1 AS id_residuo, :2 AS nome_residuo FROM dual) s
                ON (t.id_residuo = s.id_residuo)
                WHEN NOT MATCHED THEN
                    INSERT (id_residuo, nome_residuo)
                    VALUES (s.id_residuo, s.nome_residuo)
            """, (id_residuo, nome))

        # Inserir dados em empresas_parceiras
        empresas = [
            ('Aparas 2 Irmãos', 2, 'São Paulo - SP', '(11) 4091-3340'),
            ('Plaxo Reciclagem', 1, 'São Paulo - SP', '(11) 96363-2400'),
            ('Aparas Macedo', 2, 'Barueri - SP', '(11) 4247-2732'),
            ('Recrie Ambiental', 2, 'São Paulo - SP', '(11) 2091-8886'),
            ('Aparas Mantovani', 2, 'São Paulo - SP', '(11) 2012-0000')
        ]
        for nome, id_residuo, localizacao, contato in empresas:
            cursor.execute("""
                MERGE INTO empresas_parceiras t
                USING (SELECT :1 AS nome, :2 AS id_residuo, :3 AS localizacao, :4 AS contato FROM dual) s
                ON (t.nome = s.nome)
                WHEN NOT MATCHED THEN
                    INSERT (nome, id_residuo, localizacao, contato)
                    VALUES (s.nome, s.id_residuo, s.localizacao, s.contato)
            """, (nome, id_residuo, localizacao, contato))

        conn.commit()
        print("Banco preparado com sucesso!")

    except cx_Oracle.DatabaseError as e:
        print("Erro ao configurar o banco:", e)
    finally:
        cursor.close()
        conn.close()

# Etapa 3: Dica sobre ativação do ambiente
def dica_ambiente_virtual():
    print("\n Dica: Ative seu ambiente virtual manualmente antes de executar este script.")
    print("   Linux/macOS: source venv/bin/activate")
    print("   Windows:     venv\\Scripts\\activate\n")

if __name__ == "__main__":
    dica_ambiente_virtual()
    instalar_dependencias()
    preparar_banco()
